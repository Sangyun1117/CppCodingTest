//🧩 문제 이름 : 1940번 - 주몽(실버 4)
//문제
//주몽은 철기군을 양성하기 위한 프로젝트에 나섰다.
//그는 N개의 재료를 가지고 있으며 각각의 재료들은 고유한 번호를 가지고 있다.
//그는 갑옷을 만드는데 필요한 두 재료의 고유한 번호의 합이 M이 되는 경우의 수를 알고자 한다.
//예를 들어 N = 6, M = 9일 때
//재료들의 고유번호들이[2, 7, 4, 1, 5, 3]이라면,
//합이 9가 되는 쌍은(2, 7), (4, 5), (6, 3) 이렇게 3가지이다.
//
//그러나 재료들은 한 번씩만 사용할 수 있다.
//
//입력
//첫째 줄에 재료의 개수 N(1 ≤ N ≤ 15, 000)
//둘째 줄에 갑옷을 만드는데 필요한 수 M(1 ≤ M ≤ 10, 000, 000)
//셋째 줄에 각 재료의 고유한 번호들이 공백으로 구분되어 주어진다.
//(각 번호는 100, 000 이하의 자연수)
//
//출력
//갑옷을 만들 수 있는 쌍의 개수를 출력한다.
//
//예제 입력 1
//6
//9
//2 7 4 1 5 3
//예제 출력 1
//2
//💡 핵심 아이디어
//이 문제는 투 포인터 알고리즘 또는 정렬 + 이분탐색 / 해시셋 으로 풀 수 있습니다.
//
//✅ 방법 1: 투 포인터(정렬 필요)
//재료 배열을 정렬한 후, 두 포인터를 양쪽에서 움직이면서 합을 확인.
//
//left + right == M이면 count++
//
//sum < M이면 left++
//
//	sum > M이면 right--
//
//	✅ 방법 2: 해시셋(unordered_set 사용)
//	이미 본 재료를 set에 저장하고, M - 현재값이 set에 있는지 확인하면서 카운트.
//



#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


int main()
{
	int n, m;
	cin >> n >> m;

	vector<int> num(n);
	for (int i = 0; i < n; i++) {
		cin >> num[i];
	}

	sort(num.begin(), num.end());

	int left = 0;
	int right = n - 1;
	int count = 0;

	while (left < right) {
		int now = num[left] + num[right];

		if (m == now) {
			left++;
			right--;
			count++;
		}
		else if (m < now) {
			right-- ;
		}
		else
			left++;
	}

	cout << count;

}











