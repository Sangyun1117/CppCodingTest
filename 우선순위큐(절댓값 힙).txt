//🟦 백준 11286번 - 절댓값 힙
//문제
//절댓값 힙은 다음과 같은 연산을 지원하는 자료구조이다.
//
//배열에 정수 x(x ≠ 0)를 넣는다.
//
//배열에서 절댓값이 가장 작은 값을 출력하고 그 값을 배열에서 제거한다.
//
//절댓값이 가장 작은 값이 여러 개일 경우에는, 값이 가장 작은 수를 출력하고 제거한다.
//
//프로그램은 처음에 비어있는 배열에서 시작하게 된다.
//
//입력
//첫째 줄에 연산의 개수 N(1 ≤ N ≤ 100, 000) 이 주어진다.
//다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다.
//
//x가 0이면 배열에서 절댓값이 가장 작은 값을 출력하고 그 값을 제거한다.
//
//x가 0이 아니라면 배열에 x라는 값을 추가하는 연산이다.
//
//입력되는 정수는 −2³¹보다 크거나 같고, 2³¹보다 작거나 같은 정수이다.
//
//출력
//입력에서 0이 주어진 회수만큼 답을 출력한다.
//
//절댓값이 가장 작은 값을 출력해야 하며,
//
//절댓값이 같은 값이 여러 개일 경우에는 실제 값이 더 작은 값을 출력한다.
//
//배열이 비어 있는 경우에는 0을 출력한다.
//
//예제 입력 1
//18
//1
//- 1
//0
//0
//0
//1
//1
//- 1
//- 1
//2
//- 2
//0
//0
//0
//0
//0
//0
//0
//예제 출력 1
//- 1
//1
//0
//- 1
//- 1
//1
//1
//- 2
//2
//0
//🔑 핵심 아이디어
//이 문제는 커스텀 우선순위 큐(priority_queue) 또는 set / multiset / priority_queue + 비교 함수를 이용해 풀 수 있어.
//
//우선순위는 다음 순서로 :
//
//절댓값이 작은 수가 우선
//
//절댓값이 같으면 값이 작은 수가 우선

#include <iostream>
#include <queue>
using namespace std;

class MyNum {
public:
	int value;
	int absoluteValue;

	MyNum(int n) {
		value = n;
		absoluteValue = n > 0 ? n : n * (-1);
	}
};

class Compare {
public:
	bool operator()(const MyNum& m, const MyNum& o) {
		if (m.absoluteValue == o.absoluteValue) {
			return m.value > o.value;
		}
		else return m.absoluteValue > o.absoluteValue;
	}
};
int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;

	priority_queue<MyNum, vector<MyNum>, Compare> pq;

	for (int i = 0; i < n; i++) {
		int temp;
		cin >> temp;
		if (temp == 0) {
			if (pq.empty()) {
				cout << 0 << "\n";
			}
			else {
				cout << pq.top().value << "\n";
				pq.pop();
			}
		}
		else {
			pq.push(MyNum(temp));
		}

	}


}











