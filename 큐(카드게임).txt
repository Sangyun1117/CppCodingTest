//🟦 백준 2164번 - 카드2 (실버 4)
//문제
//N장의 카드가 있다.각각의 카드는 차례로 1부터 N까지의 번호가 붙어 있으며, 1번 카드가 제일 위에, N번 카드가 제일 아래인 상태로 놓여 있다.
//
//이제 다음과 같은 동작을 카드가 한 장 남을 때까지 반복하게 된다 :
//
//제일 위에 있는 카드를 버린다.
//
//그다음 제일 위에 있는 카드를 제일 아래에 있는 카드 밑으로 옮긴다.
//
//예를 들어 N = 4일 때 카드는[1, 2, 3, 4] 순서로 놓여 있고, 제일 위에서 카드부터 버리고 아래로 옮기면 카드가 없어질 때까지 다음과 같이 진행된다 :
//
//1 버림 →[2, 3, 4]
//2 밑으로 →[3, 4, 2]
//3 버림 →[4, 2]
//4 밑으로 →[2, 4]
//2 버림 →[4]
//마지막에 남는 카드는 4이다.
//
//N이 주어졌을 때, 제일 마지막에 남게 되는 카드를 구하는 프로그램을 작성하시오.
//
//입력
//첫째 줄에 정수 N(1 ≤ N ≤ 500, 000)이 주어진다.
//
//출력
//첫째 줄에 남게 되는 카드의 번호를 출력한다.
//
//예제 입력 1
//6
//예제 출력 1
//4
//🔑 핵심 아이디어
//이 문제는 큐(Queue) 자료구조를 사용하면 직관적으로 해결할 수 있습니다.
//
//매 반복마다 큐의 앞에서 하나 제거하고, 그다음 앞에서 하나를 꺼내 뒤로 다시 넣는 작업을 반복.
//
//최종적으로 큐에 하나만 남을 때 그 값을 출력.

#include <iostream>
#include <queue>
using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n;
	cin >> n;

	queue<int> q;

	for (int i = 1; i < n + 1; i++) {
		q.push(i);
	}
	bool isPopTime = true;
	while(q.size() > 1) {
		if (isPopTime) {
			q.pop();
		}
		else {
			int bottom = q.front();
			q.pop();
			q.push(bottom);
		}
		isPopTime = !isPopTime;
	}

	cout << q.front();

}











